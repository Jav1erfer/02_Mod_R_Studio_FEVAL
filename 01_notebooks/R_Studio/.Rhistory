# help(seq) ejecuta la ayuda de seq
seq(1,100) # genera secuencia de 100 num
seq(1,100, by = 5) # devuelve una secuencia de valores de 1 a 100 con paso 5
seq()
seq(0, 1, length.out = 20)
seq(1,10, along.with = 1)
seq(stats::rnorm(20))
seq(1,100, by = pi)
pi
# matrix() nrow - ncol por filas
A <-  matrix(c(1,4,6,8,-1,-4,0,6,0),
nrow = 3,
ncol = 3,
byrow = F # por defecto es FALSE
)
A
# matrix() nrow - ncol por columnas
A <-  matrix(c(1,4,6,8,-1,-4,0,6,0),
nrow = 3,
ncol = 3,
byrow = T # forzamos el parámetro en TRUE
)
A
# añadimos filas y columnas con las funciones rbind() y cbind()
matriz_2 <- cbind(A, c(-3,-5,9))
matriz_2
matrix_3 <- rbind(A, c(5,10,0))
matrix_3
# Probamos en añadir una fila con dos valores solamente ?¿
matrix_2 <- rbind(A, c(12, NULL, 10))
matrix_2
matrix_2
# Referenciamos los valores en la matriz
matrix_2[1,3] # extrae el valor de la primera fila, tercera columna
matrix_3[3,] # extrae los valores de la tercera fila
matrix_3[,2] # extrae los valores de la segunda columna
matrix_3[1:2, ] # extrae los valores de 2 filas y todas las columnas
matrix_3[2,2:3] # extrae los valores de la segunda fila, columna 2 y 3
dim(matrix_2) # dimensión de la matriz
dim(matrix_2)[1] # devuelve el resultado del números de filas de dim()
dim(matrix_2)[2] # devuelve el resultado del número de columnas de dim()
diag(matrix_3) # extrae los elementos de la diagonal de la matriz
t(matrix_3)  # transpone una matriz
matrix_2*matrix_3 # operaciones de matrices
#matrix_2%*% matrix_2 producto escalado
cuadrado <- function(x){
x^2
}
cuadrado(vector_ruleta)
# Alternativa para aplicar una función personalizada
sapply(vector_ruleta, FUN = cuadrado)
student <- c(1, 3, 5, 7, 8, 9, 10)
fac <- factor(student,
levels = c(1,3,5,7,9,10),
labels = c("Sup", "Sup", "Aprob", "Notab", "Exc","MH"))
fac
genero <- c("Masculino", "Femenino", "Femenino", "Masculino", "Masculino")
factor_genero <- factor(genero)
factor_genero
desempeno_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_laboral = factor(desempeno_laboral,
levels = c("Bajo", "Medio", "Alto"),
ordered = TRUE)
factor_laboral
factor_laboral[1] # extrae el valor de la primera posición del vector
factor_laboral[2] # extrae el valor de la segunda pos del vector
factor_laboral[1] < factor_laboral[2] # devolverá FALSE porque ALTO es mayor que BAJO
factor_laboral[3] > factor_laboral[2] # devuelve TRUE porque MEDIO es mayor que BAJO
levels(factor_laboral) # devuelve los niveles del factor
is.ordered(factor_laboral) # está ordenado el factor (vector factorizado)
is.factor(desempeno_laboral) # es un factor el vector desempeno_laboral? Será FALSE porque es un vector simple
# Demostración del factor sin niveles sin ordenación
factor_2 <- as.factor(desempeno_laboral)
factor_2
factor_2[1]
factor_2[2]
#factor_2[1] > factor_2[2] # no puede realizar una comparativa porque no tenemos niveles ordenados
# Taquilla de Star Wars: En Millones de dólares (USD)!
# Primer elemento taquilla en EEUU, segundo taquilla fuera de EEUU.
new_hope <- c(460.998, 314.400)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.800)
# Crear una matriz
star_wars_matriz <- matrix(
c(new_hope, empire_strikes, return_jedi),
byrow = TRUE,
nrow = 3
)
star_wars_matriz
# como puedo saber si es una matriz ?
is.matrix(star_wars_matriz) # evalua si es una matriz o no
#typeof(star_wars_matriz) evalua el valor
star_wars_matriz
# Creamos primero los vectores
peliculas <- c("New Hope",
"Empire Strikes",
"Return Jedi")
country <- c("USA",
"no-USA")
# Asignamos a las filas el vector pelicula y las columnas el vector country
rownames(star_wars_matriz) <- peliculas
colnames(star_wars_matriz) <- country
star_wars_matriz
# Sumamos las taquillas por fila
vec_suma_fila <-  rowSums(star_wars_matriz)
vec_suma_fila
# colSums() suma por columna
length(star_wars_matriz)
# suma de las taquillas globales
taquilla_global <- colSums(
star_wars_matriz
)
taquilla_global[1]
taquilla_global[2]
taquilla_global[1] + taquilla_global[2]
# Creamos una nueva matriz
taquillas2 <- c(474.5, 552.5, 310.7, 338.7, 380.3, 468.5)
nombres2 <- c("The Phantom Menace", "Attack of the Clones", "Revenge of the Sith")
star_wars_matriz_2 <- matrix(
taquillas2,
nrow = 3,
byrow = TRUE,
dimnames = list(
nombres2,
country) # country es igual a c("US", "no-US")
)
star_wars_matriz_2
# combinación de matrices
todo_star_wars <- rbind(star_wars_matriz,
star_wars_matriz_2) # realizamos un append por fila de las dos matrices
todo_star_wars
# total de las taquillas de US y noUS
total_taquillas_region <- colSums(todo_star_wars)
total_taquillas_region
# Promedio no-US
promedio_noUS <- mean(todo_star_wars[,2])
promedio_noUS
# Promedio US
promedio_US <- mean(todo_star_wars[,1])
promedio_US
# Promedio de las 3 primeras peliculas US
promedio_3_US <- mean(todo_star_wars[1:3,1])
promedio_3_US
# Buscamos el max de las taquillas de no-US
max_taquillas_noUS <- max(todo_star_wars[,2])
max_taquillas_noUS
# Buscamos el promedio de no-US pero de forma alterna
promedio_alterno_noUS <- mean(todo_star_wars[c(1,3,5),2])
promedio_alterno_noUS
# Buscamos los resultados de la segunda fila, segunda columna
todo_star_wars[2,2]
# Buscamos los resultados de la segunda columna
todo_star_wars[,2]
# Buscamos los resultados de la cuarta fila
todo_star_wars[4,]
# Buscamos el min de la quinta fila
min(todo_star_wars[5,])
# Desviación estandar de la segunda columna
sd(todo_star_wars[,2])
install.packages("ggplot2")
install.packages("caTools")
# Sentencias condicionales 1
x <- 3
if (x < 0) {
print("x es un número positivo")
}
# Sentencias condicionales 1
x <- 3
if (x < 0) {
print("x es un número positivo")
}
# sentencias condicionales 2
y <- 6
if (y < 0) {
sprintf("%d es un número negativo", y)
}else if (y == 0) {
sprintf("%d es cero", y)
} else {
print("y es un número positivo o cero")
}
# sentencias condicionales 3
z <- 56
ifelse(z > 0, "z es número positivo", "z es número negativo")
# creamos un vector de los días de la semana
dias_semana <- c("Lunes", "Martes", "Miércoles",
"Jueves", "Viernes", "Sábado", "Domingo")
vector_poker <- c(140, -50, -20, 20, 100, 200, -100)
vector_ruleta <- c(100, 100, -400, 20, 10, 100, 200)
# Como alternativa podemos utilizar la función scan() para crear vectores
# vector_ruleta <- scan() # aquí añadimos en consola los valores PD Recordad de parar con doble intro
print(vector_poker)
print(vector_ruleta)
# Nombrado de las columnas o damos cuerpo al encabezado de las columnas
names(vector_poker) <- dias_semana
names(vector_ruleta) <- dias_semana
# observamos el resultado con los nombres de las columnas
vector_poker
# Cálculamos las ganancias / pérdidas diarias
total_diario <- vector_ruleta + vector_poker
total_diario
length(vector_poker)
max(vector_ruleta)
# También podemos utilizar la función which()
vector_ruleta[which(vector_ruleta > 50)]
# which.max y which.min devuelve los índices respectivos de los vectores
which.min(vector_poker)
# podemos ordenar los vectores con la función sort()
sort(vector_poker) # ordenará de forma ASC de menor a mayor
sort(vector_poker, decreasing = TRUE) # ordenará de mayor a menor
# operaciones de estadísticos básicos
mean(vector_poker)
median(vector_ruleta)
var(vector_poker)
cov(vector_ruleta)
cov(vector_ruleta, vector_poker)
sd(vector_ruleta)
# podemos utilizar table() para mostrar los valores absolutos
table(vector_poker)
table(vector_poker) / length(vector_poker)
long_ruleta <- length(vector_ruleta)
table(vector_ruleta) / long_ruleta
table(vector_ruleta) / 7
corr(vector_poker, vector_ruleta)
cor(vector_poker, vector_ruleta)
table(vector_ruleta) / 7
suma
suma <- 0
for (i in vector_poker) {
suma <- suma + 1 # suma los índices
}
suma
suma <- 0
for (i in vector_poker) {
suma <- suma + i # suma los valores
}
suma
num <-  NULL # inicializamos el vector con Null o vector vacío
for (i in 1:100) {
num <- c(num, i)
}
num
# alternativa del método de asignación
num <- 0
for (i in 1:100){
num[i] <- i
}
num
# podemos crear vectores
seq(1,00) # genera secuencia de 100 valores
# podemos crear vectores
seq(1,100) # genera secuencia de 100 valores
seq(1, 100, by=5) # start 1, stop 100 y paso 5
# matrix() nrow, ncol por filas
A <- matrix(c(1, 4, 6, 8, -1, -4, 0 , 6, 0),
nrow = 3,
ncol = 3,
byrow = F) # por defecto es FALSE
# matrix() nrow, ncol por filas
A <- matrix(c(1, 4, 6, 8, -1, -4, 0 , 6, 0),
nrow = 3,
ncol = 3,
byrow = F) # por defecto es FALSE
A
# matrix() nrow, ncol por columnas
A <- matrix(c(1, 4, 6, 8, -1, -4, 0 , 6, 0),
nrow = 3,
ncol = 3,
byrow = T) # forzamos el parámetro byrow en TRUEo T
A
# añadimos filas y columnas con las fucniones rbind() y cbind()
matriz_2 <- cbind(A, c(-3, 5, 9))
matriz_2
matriz_3 <- rbind(A, c(5, 16, -5)) # añadimos una fila a la matriz A
matriz_3
# probamos añadiendo filas con dos valores solamente
matriz_2 <- rbind(A, c(12, NULL, 10))
matriz_2
# Referenciamos los valores en la matriz
matriz_2[1,3] # extraerá los valores
# Referenciamos los valores en la matriz
print(matriz_2)
matriz_2[1,3] # extraerá los valores
matriz_2[3, ] # extrae los valores de la tercera fila
matriz_2[, 2] # extrae los valores de la segunda columna
matriz_3
matriz_3[1:2, ]
matriz_3[2,3:4] # extrae los valores de la segunda fila y columna 3,4
matriz_3[2, 2:3] # extrae los valores de la segunda fila y columna 3,4
matriz_3[2, 3:4] # extrae los valores de la segunda fila y columna 3,4
matriz_3[2, 2:3] # extrae los valores de la segunda fila y columna 3,4
dim(matriz_2) # dimensión de la matriz
dim(matriz_3)[1] # recogemos solo el resultado del número de filas del output de dim()
dim(matriz_3)
dim(matriz_3)[1] # recogemos solo el resultado del número de filas del output de dim()
dim(matriz_3)[2] # recogemos solo el resultado del número de columnas
diag(matriz_3) # extrae los elementos de la diagonal
t(matriz_3) # transposición de una matriz
matriz_2 * matriz_3
matriz_2%*% matriz_2 # producto escalado
matriz_2 %*% matriz_2 # producto escalado
matriz_2 %*% matriz_3 # producto escalado
matriz_2%*% matriz_3 # producto escalado
matriz_2%*%matriz_3 # producto escalado
matriz_2%*%matriz_2 # producto escalado
matrix_2%*% matrix_2 # producto escalado
matriz_2%*% matriz_2 # producto escalado
matriz_2%*%matriz_2 # producto escalado
cuadrado <- function(x) {
x^2
}
cuadrado(vector_ruleta)
# alternativa con sapply
sapply(vector_ruleta, FUN = cuadrado)
student <- c(1, 3, 4, 5, 7, 8, 10)
fac <- factor(student,
levels = student,
labels = c("Sup", "Sup", "Apro", "Nota", "Exc", "MH"))
student <- c(1, 3, 4, 5, 7, 8, 10)
fac <- factor(student,
levels = student,
labels = c("Sup", "Sup", "Sup", "Apro", "Nota", "Exc", "MH"))
fac
student <- c(1, 3, 4, 5, 7, 8, 10)
fac_1 <- factor(student,
labels = c("Sup", "Sup", "Sup", "Apro", "Nota", "Exc", "MH"))
fac_1
student
fac_1
student_2 <- c(4, 5, 7, 8, 10, 1, 3)
fac_2 <- factor(student_2,
levels = c(1, 3, 4, 5, 7, 8, 10),
labels = c("Sup", "Sup", "Sup", "Apro", "Nota", "Exc", "MH"))
fac_2
genero <- c("Masc", "Masc", "Fem", "Masc", "Fem")
factor_genero <- factor(genero)
factor_genero
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des <- factor(desempenyo_laboral,
levels = c("Bajo", "Medio", "Alto"),
oordered = TRUE)
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des <- factor(desempenyo_laboral,
levels = c("Bajo", "Medio", "Alto"),
oordered = TRUE)
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des <- factor(desempenyo_laboral,
levels = c("Bajo", "Medio", "Alto"),
oordered = TRUE)
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des <- factor(desempenyo_laboral,
levels = c("Bajo", "Medio", "Alto"),
ordered = TRUE)
factor_des
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des <- factor(desempenyo_laboral)
factor_des
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des_1 <- factor(desempenyo_laboral,
levels = c("Bajo", "Medio", "Alto"),
ordered = TRUE)
factor_des_1
desempenyo_laboral <- c("Alto", "Bajo", "Medio", "Alto", "Bajo", "Medio", "Alto", "Alto", "Bajo")
factor_des_2 <- factor(desempenyo_laboral)
factor_des_2
factor_des_1[1]
factor_des_1[1] < factor_des_1[3]
factor_des_1[1] > factor_des_1[3]
factor_des_1[1] < factor_des_1[3]
factor_des_1[1] # podemos extraer el primer valor o resultado de nuestro factor
factor_des_1[2]
factor_des_1[3]
factor_des_1[1] > factor_des_1[3] # evalua Alto > Bajo
# para analizar los niveles
levels(factor_des_1)
is.ordered(factor_des_1)
is.ordered(factor_genero)
is.factor(factor_genero) # evalua si el objeto es un factor o no
# también podemos transformar en factores
fac_3 <- as.factor(factor_des_1)
fac_3
# Taquilla de Star Wars: En Millones de dólares (USD)!
# Primer elemento taquilla en EEUU, segundo taquilla fuera de EEUU.
new_hope <- c(460.998, 314.400)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.800)
# Crear una matriz
star_wars_matriz <- matrix(
c(new_hope, empire_strikes, return_jedi),
byrow = TRUE,
nrow = 3
)
star_wars_matriz+
# Taquilla de Star Wars: En Millones de dólares (USD)!
# Primer elemento taquilla en EEUU, segundo taquilla fuera de EEUU.
new_hope <- c(460.998, 314.400)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.800)
# Crear una matriz
star_wars_matriz <- matrix(
c(new_hope, empire_strikes, return_jedi),
byrow = TRUE,
nrow = 3
)
star_wars_matriz
# Como evaluamos una matriz
is.matrix(star_wars_matriz)
typeof(star_wars_matriz)
# Creamos el encabezado, creamos primero los vectores
peliculas <- c("New Hope",
"Empire Strikes",
"Return Jedi")
# Para los paises EEUU y no-EEUU
country <- c("USA",
"no-USA") # declaramos un vector o array
# Asignamos a las filas el vector pelicula y las columnas el vector country
rownames(star_wars_matriz) <- peliculas
colnames(star_wars_matriz) <- country
star_wars_matriz
# Sumamos las taquillas por fila
vec_suma_fila <-  rowSums(star_wars_matriz)
vec_suma_fila
# Sumamos las taquillas por fila
vec_suma_fila <-  rowSums(star_wars_matriz) # suma por fila
vec_suma_fila
# sumamos por columna sería colSums(
vec_suma_columna <- colSums(star_wars_matriz)
vec_suma_columna
)
# Sumamos las taquillas por fila
vec_suma_fila <-  rowSums(star_wars_matriz) # suma por fila
vec_suma_fila
# sumamos por columna sería colSums(
vec_suma_columna <- colSums(star_wars_matriz)
vec_suma_columna
# suma de las taquillas globales
taquilla_global <- colSums(
star_wars_matriz
)
taquilla_global
# suma de las taquillas globales
taquilla_global <- colSums(
star_wars_matriz
)
taquilla_global[1]
# suma de las taquillas globales
taquilla_global <- colSums(
star_wars_matriz
)
taquilla_global[1]
taquilla_global[2]
# suma de las taquillas globales
taquilla_global <- colSums(
star_wars_matriz
)
taquilla_global[1]
taquilla_global[2]
taquilla_global[1] + taquilla_global[2] # suma de las dos
# Creamos una nueva matriz
taquillas2 <- c(474.5, 552.5, 310.7, 338.7, 380.3, 468.5)
nombres2 <- c("The Phantom Menace", "Attack of the Clones", "Revenge of the Sith")
# creamos la matriz
star_wars_matriz_2 <- matrix(
taquillas2,
nrow = 3,
byrow = TRUE,
dimnames = list(
nombres2,
country) # country es igual a c("US", "no-US")
)
star_wars_matriz_2
# combinación de matrices
todo_star_wars <- rbind(star_wars_matriz,
star_wars_matriz_2) # realizamos un append por fila de las dos matrices
todo_star_wars
t(star_wars_matriz)
transp_mat_1 <- t(star_wars_matriz)
transp_mat_1
transp_mat_2 <- t(star_wars_matriz_2)
transp_mat_2
# combinación de matrices por columna
todo_star_wars_2 <- cbind(transp_mat_1,
transp_mat_2) # realizamos un append por fila de las dos matrices
todo_star_wars_2
# total de las taquillas de US y noUS
total_taquillas_region <- colSums(todo_star_wars)
total_taquillas_region
# Promedio no-US
promedio_noUS <- mean(todo_star_wars[,2])
promedio_noUS
# Promedio US
promedio_US <- mean(todo_star_wars[,1])
promedio_US
# Promedio de las 3 primeras peliculas US
promedio_3_US <- mean(todo_star_wars[1:3,1])
promedio_3_US
# Buscamos el max de las taquillas de no-US
max_taquillas_noUS <- max(todo_star_wars[,2])
max_taquillas_noUS
# Buscamos el promedio de no-US pero de forma alterna
promedio_alterno_noUS <- mean(todo_star_wars[c(1,3,5),2]) # recordad que el índice y posición en R empieza por 1
promedio_alterno_noUS
# Buscamos los resultados de la segunda fila, segunda columna
todo_star_wars[2,2]
# Buscamos los resultados de la segunda columna
todo_star_wars[,2]
# Buscamos los resultados de la cuarta fila
todo_star_wars[4,]
# Buscamos el min de la quinta fila
min(todo_star_wars[5,])
# Desviación estandar de la segunda columna
sd(todo_star_wars[,2])
