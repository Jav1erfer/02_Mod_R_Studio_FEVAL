50 + 1
plot(cars)
plot(cars)
plot(cars)
51 + 1
plot(cars)
51 + 1
# Esta es una línea de comentario
texto = "parte del código" # otra línea de comentario
text_2 <- "otra parte del código"
clear
text_2
texto
# Esta es una línea de comentario
texto = "parte del código" # otra línea de comentario
text_2 <- "otra parte del código"
plot(cars)
51 + 1
print(pi, 5)
print(pi, 10)
rocund(pi, 5)
round(pi, 5)
floor(pi)
ceiling(pi)
miVariable = 4
doble = function(x){
2*x
}
# Para reutilizar la función
doble(miVariable)
cuadrado = function(x){x^2}
cuadrado(miVariable)
library(car)
library(car)
install.packages("car")
library(car)
library(car)
```{r}
# creamos un vector
c(1,2,3)
install.packages("car")
library(car)
head(cars,3) # mostramos las tres primeras líneas
library(car)
head(cars,3) # mostramos las tres primeras líneas
```{r}
c(1,2,3) # para declarar un vector
```
```{r}
primer_vector = c(1,2,3) # para declarar un vector
```
```{r}
scan() # para definir un vector de forma manual
```{r}
scan() # para definir un vector de forma manual
scan()
```{r}
segundo_vector = scan() # para definir un vector de forma manual
scan()
```{r}
fix(primer_vector) # cuando necesitamos modificar un vector x
```
```{r}
rep(a, n)# dado un objeto a, define un vector constante n veces
```
```{r}
rep("RStudio", 6)# dado un objeto a, define un vector constante n veces
```
```{r}
rep("RStudio", 6)# dado un objeto a, define un vector constante n veces
```
```{r}
sapply(primer_vector, FUN=cuadrado)
```
```{r}
sapply(primer_vector, FUN=cuadrado) # es el equivalente de un ciclo FOR ... LOOP
```
```{r}
sapply(primer_vector, FUN=doble) # es el equivalente de un ciclo FOR ... LOOP
```
```{r}
# funciones nativas
sqrt(primer_vector)
```
